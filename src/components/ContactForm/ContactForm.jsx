import React from 'react';
import {Formik, Form, Field} from 'formik';
import * as Yup from 'yup';
import cx from 'classnames';
import {withRouter} from 'react-router-dom';
import swal from 'sweetalert2';
import 'moment/locale/ru';
import locale from 'antd/es/date-picker/locale/ru_RU';
import {DatePicker} from 'antd';
import moment from 'moment'
import Cleave from 'cleave.js/react';
import {request} from '../../api';
import 'antd/dist/antd.css'

const {RangePicker} = DatePicker;

const Input = ({
                   field,
                   type,
                   form: {touched, errors},
                   ...props
               }) => {
    const classNames = cx('input', {'success': touched[field.name] && !errors[field.name]}, {'error': touched[field.name] && errors[field.name]})

    return <div className='inputWrapper' style={{
        position: field.name === 'hidden' ? 'absolute' : 'relative',
        zIndex: field.name === 'hidden' ? '-100' : 'unset'
    }}>
        <input type={type} className={classNames} {...field} {...props} />
        {touched[field.name] &&
        errors[field.name] && <div className='error'>{errors[field.name]}</div>}
    </div>
};

const NumInput = ({
                      field,
                      type,
                      form: {touched, errors},
                      ...props
                  }) => {
    const classNames = cx('input', {'success': touched[field.name] && !errors[field.name]}, {'error': touched[field.name] && errors[field.name]})
    return <div style={{position: 'relative'}} className='inputWrapper'>
        <Cleave placeholder='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
                options={{
                    prefix: '+7',
                    delimiters: [' (', ') ', '-', '-'],
                    blocks: [2, 3, 3, 2, 2],
                }}
                className={classNames}
                {...field} {...props}
                type={type}
        />
        {touched[field.name] &&
        errors[field.name] && <div className='error'>{errors[field.name]}</div>}
    </div>
};

const SelectInput = ({
                         field,
                         form: {touched, errors},
                         ...props
                     }) => {
    const classNames = cx('input', {'success': touched[field.name] && !errors[field.name]}, {'error': touched[field.name] && errors[field.name]})
    return <div style={{position: 'relative'}} className='inputWrapper'>
        <select
            className={classNames}
            {...props}
            {...field}
        >
            children = this.props
        </select>
        {touched[field.name] &&
        errors[field.name] && <div className='error'>{errors[field.name]}</div>}
    </div>
};

const Textarea = ({
                      field,
                      form: {touched, errors},
                      ...props
                  }) => {
    const classNames = cx('input', {'success': touched[field.name] && !errors[field.name]}, {'error': touched[field.name] && errors[field.name]})
    return <div className='inputWrapper' style={{position: 'relative'}}>
        <textarea rows={6} className={classNames} {...field} {...props} />
        {touched[field.name] &&
        errors[field.name] && <div className='error'>{errors[field.name]}</div>}
    </div>
};

const ContactForm = ({
                         submitBtnText,
                         setPopupOpen,
                         withName,
                         withEmail,
                         withPhone,
                         withMessage,
                         withAge,
                         withDate,
                         withHiddenInput,
                         hiddenInputValue,
                         formName,
                         setNumQuestion,
                         swalText = '–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –í–∞—à—É –∑–∞—è–≤–∫—É üòå',
                         textAreaPlaceholder = '–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                         requestUrl,
                         withFile,
                        //  ...props
                     }) => {

    const rePhoneNumber = /^(\+?\d{0,4})?\s?-?\s?(\(?\d{3}\)?)\s?-?\s?(\(?\d{3}\)?)\s?-?\s?(\(?\d{4}\)?)?$/;
    const reAge = /^[1-9]?[0-9]{1}$|^100$/;

    Yup.addMethod(Yup.string, "phone", function testPhone () {
        return this.test("phone", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä", value =>
            rePhoneNumber.test(value)
        );
    });

    Yup.addMethod(Yup.string, "age", function testPhone () {
        return this.test("age", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç", value =>
            reAge.test(value)
        );
    });

    const Schema = Yup.object().shape({
        name: withName ? Yup.string()
            .min(2, '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è üò¢')
            .max(25, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è üò¢')
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è') : null,
        phone: withPhone ? Yup.string()
            .min(11, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7xxxxxxxxxx')
            .max(16, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üò¢')
            .phone()
            .required('–≠—Ç–æ –ø–æ–ª–µ —Ç–æ–∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ') : null,
        age: withAge ? Yup.string()
            .min(1, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')
            .max(2, '–í–æ–∑—Ä–∞—Å—Ç —É–∫–∞–∑–∞–Ω –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ üò¢')
            .age()
            .required('–≠—Ç–æ –ø–æ–ª–µ —Ç–æ–∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ') : null,
        date: withDate && Yup.string().required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É'),
        email: withEmail ? Yup.string()
            .email('E-mail –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
            .required('–≠—Ç–æ –ø–æ–ª–µ —Ç–æ–∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ') : null,
        message: withMessage ? Yup.string()
            .min(2, '–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –±—É–∫–≤ üò¢')
            .max(3000, '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±—É–∫–≤ üò¢')
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è') : null,
    });

    const data = {};

    const onSubmit = (values, {resetForm}) => {
        data.form = {
            'url': `${requestUrl || window.location.href}`,
        };
        if (withFile) data.form = {
            ...data.form,
            'file': '33239e62-a114-4f98-85e0-5b780224698d'
        }
        data.inputs = [
            {
                'alias': '–ò—Å—Ç–æ—á–Ω–∏–∫',
                'value': formName,
            }
        ];
        if (withName) data.inputs = [
            ...data.inputs,
            {
                'alias': '–ò–º—è',
                'value': values.name,
            },
        ];
        if (withPhone) data.inputs = [
            ...data.inputs,
            {
                'alias': '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                'value': values.phone,
            },
        ];
        if (withEmail) data.inputs = [
            ...data.inputs,
            {
                'alias': 'E-mail',
                'value': values.email,
            },
        ];
        if (withMessage) data.inputs = [
            ...data.inputs,
            {
                'alias': '–°–æ–æ–±—â–µ–Ω–∏–µ',
                'value': values.message,
            },
        ];
        if (withAge) data.inputs = [
            ...data.inputs,
            {
                'alias': '–í–æ–∑—Ä–∞—Å—Ç',
                'value': values.age,
            },
        ];
        if (withDate) data.inputs = [
            ...data.inputs,
            {
                'alias': '–î–∞—Ç–∞',
                'value': values.date,
            },
        ];
        if (withHiddenInput) data.inputs = [
            ...data.inputs,
            {
                'alias': '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã',
                'value': hiddenInputValue,
            },
        ];

        window.ym(46190439, 'reachGoal', 'sendForm');
        request(data)
            .then((response) => {
                if (response.status === 200) {
                    if (values.name) {
                        const name = values.name[0].toUpperCase() + values.name.slice(1);
                        swal.fire({
                            title: `–°–ø–∞—Å–∏–±–æ, ${name}!`,
                            text: swalText,
                            icon: 'success',
                            confirmButtonText: '–•–æ—Ä–æ—à–æ'
                        })
                    } else if (withFile) {
                        swal.fire({
                            title: `–°–ø–∞—Å–∏–±–æ!`,
                            text: '–°–∫–∞—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ',
                            icon: 'success',
                            confirmButtonText: '–°–∫–∞—á–∞—Ç—å –ø—Ä–∞–π—Å'
                        })
                            .then(() => {
                                window.open('documents/–ü—Ä–æ–º–µ—Ç–µ–π_–ü—Ä–∞–π—Å 2021.jpg')
                            })
                    } else swal.fire({
                        title: `–°–ø–∞—Å–∏–±–æ!`,
                        text: swalText,
                        icon: 'success',
                        confirmButtonText: '–•–æ—Ä–æ—à–æ'
                    })

                }
            })
            .catch((err) => {
                swal.fire({
                    title: '–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ü§≠',
                    text: '–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º!',
                    icon: 'error',
                    confirmButtonText: '–•–æ—Ä–æ—à–æ'
                })
                console.log(err)
            });

        resetForm({})

    };


    return <Formik
        initialValues={{
            name: '',
            phone: '',
            email: '',
            message: '',
            date: '',
            hidden: '',
        }}
        validationSchema={Schema}
        onSubmit={onSubmit}>
        <Form>
            {/* <Field component={Input} name='hidden' /> */}
            {withName && <Field component={Input} name='name' placeholder='–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è'/>}
            {withEmail && <Field component={Input} name='email' type='text' placeholder='–í–≤–µ–¥–∏—Ç–µ –í–∞—à E-mail'/>}
            {withPhone && <Field component={Input} name='phone' type='text' placeholder='–í–≤–µ–¥–∏—Ç–µ –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω'/>}
            {withMessage && <Field component={Textarea} name='message' placeholder={textAreaPlaceholder}/>}
            {withAge && <Field component={Input} name='age' type='number' placeholder='–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç'/>}
            <button type='submit'
                    onClick={() => {
                        setPopupOpen && setPopupOpen(false);
                        withHiddenInput && setNumQuestion(0);
                    }}>{submitBtnText}
            </button>
        </Form>
    </Formik>
};

export const BookingContactForm = ({
                                sports = 'initial',
                                setPopupOpen,
                                swalText = '–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –í–∞—à—É –∑–∞—è–≤–∫—É üòå',
                                requestUrl,
                                ...props
                            }) => {

    const Schema = Yup.object().shape({
        name: Yup.string()
            .min(2, '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –§–ò–û üò¢')
            .max(25, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –§–ò–û üò¢')
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û'),
        phone: Yup.string()
            .min(18, '–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ')
            .max(18, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üò¢')
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä'),
        email: Yup.string()
            .email('E-mail –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É'),
        athletesAmount: Yup.string()
            .min(1, '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤')
            .max(3, '–°–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫ –º–Ω–æ–≥–æ')
            .required('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤'),
        coachesAmount: Yup.string()
            .min(1, '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤')
            .max(3, '–¢—Ä–µ–Ω–µ—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫ –º–Ω–æ–≥–æ')
            .required('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤'),

    });

    const data = {};

    const onSubmit = (values, {resetForm}) => {
        console.log(values)
        data.form = {
            'url': `${requestUrl || window.location.href}`,
        };
        data.inputs = [
            {
                'alias': '–ò—Å—Ç–æ—á–Ω–∏–∫',
                'value': `–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–ø–æ—Ä—Ç—Å–±–æ—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${window.location.href}`,
            },
            {
                'alias': '–î–∞—Ç—ã',
                'value': `${selectedDate[0]} ‚Äì ${selectedDate[1]}`,
            },
            {
                'alias': '–§–ò–û',
                'value': values.name,
            },
            {
                'alias': '–¢–µ–ª–µ—Ñ–æ–Ω',
                'value': values.phone,
            },
            {
                'alias': 'Email',
                'value': values.email,
            },
            {
                'alias': '–ö–æ–ª-–≤–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤',
                'value': values.athletesAmount,
            },
            {
                'alias': '–ö–æ–ª-–≤–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤',
                'value': values.coachesAmount,
            },
        ];

        request(data)
            .then((response) => {
                if (response.status === 200) {
                    if (values.name) {
                        const name = values.name[0].toUpperCase() + values.name.slice(1);
                        swal.fire({
                            title: `–°–ø–∞—Å–∏–±–æ, ${name}!`,
                            text: swalText,
                            icon: 'success',
                            confirmButtonText: '–•–æ—Ä–æ—à–æ'
                        })
                    } else swal.fire({
                        title: `–°–ø–∞—Å–∏–±–æ!`,
                        text: swalText,
                        icon: 'success',
                        confirmButtonText: '–•–æ—Ä–æ—à–æ'
                    })

                }
            })
            .catch((err) => {
                swal.fire({
                    title: '–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ü§≠',
                    text: '–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º!',
                    icon: 'error',
                    confirmButtonText: '–•–æ—Ä–æ—à–æ'
                })
                console.log(err)
            });

        resetForm({})

    };

    const [selectedDate, setSelectedDate] = React.useState(['01.06.2021', '01.07.2021'])
    const [moments, setMoments] = React.useState([])

    const onDateChange = (thisMoment, dateStrings) => {
        setSelectedDate(dateStrings)
        setMoments(thisMoment)
        console.log(selectedDate)
    }

    return <Formik
        initialValues={{
            sports,
            name: '',
            phone: '',
            email: '',
            athletesAmount: '',
            coachesAmount: '',
        }}
        validationSchema={Schema}
        onSubmit={onSubmit}>
        <Form>
            <RangePicker locale={locale}
                         onChange={onDateChange}
                         defaultValue={[moment('01.06.2021', 'DD.MM.YYYY'), moment('01.07.2021', 'DD.MM.YYYY')]}
                         format='DD.MM.YYYY'/>

            <Field component={Input} name='name' placeholder='–§–ò–û'/>
            <Field component={NumInput} name='phone' placeholder='–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'/>
            <Field component={Input} name='email' type='text' placeholder='–í–∞—à e-mail'/>
            <Field component={Input} name='athletesAmount' type='number' placeholder='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤'/>
            <Field component={Input} name='coachesAmount' type='number' placeholder='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤'/>
            <Field component={SelectInput} name='sports'>
                <option value='initial' disabled>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞</option>
                <option value='–ü–ª–∞–≤–∞–Ω–∏–µ'>–ü–ª–∞–≤–∞–Ω–∏–µ</option>
                <option value='–§—É—Ç–±–æ–ª'>–§—É—Ç–±–æ–ª</option>
                <option value='–ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞'>–ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞</option>
                <option value='–ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞'>–ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞</option>
                <option value='–ë–∞—Å–∫–µ—Ç–±–æ–ª'>–ë–∞—Å–∫–µ—Ç–±–æ–ª</option>
                <option value='–í–æ–ª–µx–π–±–æ–ª'>–í–æ–ª–µ–π–±–æ–ª</option>
                <option value='–ì–∞–Ω–¥–±–æ–ª'>–ì–∞–Ω–¥–±–æ–ª</option>
            </Field>

            <button type='submit'
                    onClick={() => {
                        setPopupOpen && setPopupOpen(false);
                    }}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
            </button>
        </Form>
    </Formik>
};


export default withRouter(ContactForm)
